import { resolveComponent, useSSRContext } from "vue";
import { ssrRenderAttrs, ssrRenderComponent, ssrRenderStyle } from "vue/server-renderer";
import { _ as _export_sfc } from "./plugin-vue_export-helper.1tPrXgE0.js";
const __pageData = JSON.parse('{"title":"快速上手","description":"","frontmatter":{},"headers":[],"relativePath":"utils/started.md","filePath":"utils/started.md","lastUpdated":1732009613000}');
const _sfc_main = { name: "utils/started.md" };
function _sfc_ssrRender(_ctx, _push, _parent, _attrs, $props, $setup, $data, $options) {
  const _component_GlobalElement = resolveComponent("GlobalElement");
  _push(`<div${ssrRenderAttrs(_attrs)}><h1 id="快速上手" tabindex="-1">快速上手 <a class="header-anchor" href="#快速上手" aria-label="Permalink to &quot;快速上手&quot;">​</a></h1>`);
  _push(ssrRenderComponent(_component_GlobalElement, null, null, _parent));
  _push(`<h2 id="简要介绍" tabindex="-1">简要介绍 <a class="header-anchor" href="#简要介绍" aria-label="Permalink to &quot;简要介绍&quot;">​</a></h2><p>开箱即用！</p><h2 id="使用方式" tabindex="-1">使用方式 <a class="header-anchor" href="#使用方式" aria-label="Permalink to &quot;使用方式&quot;">​</a></h2><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">&lt;</span><span style="${ssrRenderStyle({ "--shiki-light": "#22863A", "--shiki-dark": "#85E89D" })}">script</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}"> setup</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}"> lang</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">=</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">&quot;ts&quot;</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">import</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">  dateFormat,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">  formatNumber,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">  rafTimeout,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">  cancelRaf,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">  throttle,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">  debounce,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">  add,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">  downloadFile,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">  toggleDark,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">  useEventListener,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">  useMutationObserver,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">  useScroll,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">  useFps,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">  useMediaQuery,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">  useResizeObserver,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">  useSlotsExist</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">} </span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">from</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> &#39;vue-amazing-ui&#39;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">&lt;/</span><span style="${ssrRenderStyle({ "--shiki-light": "#22863A", "--shiki-dark": "#85E89D" })}">script</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">&gt;</span></span></code></pre></div><h2 id="常用工具函数" tabindex="-1">常用工具函数 <a class="header-anchor" href="#常用工具函数" aria-label="Permalink to &quot;常用工具函数&quot;">​</a></h2><table tabindex="0"><thead><tr><th style="${ssrRenderStyle({ "text-align": "left" })}">Name</th><th style="${ssrRenderStyle({ "text-align": "left" })}">Description</th><th style="${ssrRenderStyle({ "text-align": "left" })}">Type</th></tr></thead><tbody><tr><td style="${ssrRenderStyle({ "text-align": "left" })}">dateFormat</td><td style="${ssrRenderStyle({ "text-align": "left" })}">格式化日期时间字符串函数</td><td style="${ssrRenderStyle({ "text-align": "left" })}">(value: number | string | Date = Date.now(), format: string = &#39;YYYY-MM-DD HH:mm:ss&#39;) =&gt; string</td></tr><tr><td style="${ssrRenderStyle({ "text-align": "left" })}">formatNumber</td><td style="${ssrRenderStyle({ "text-align": "left" })}">数字格式化函数</td><td style="${ssrRenderStyle({ "text-align": "left" })}">(value: number | string, precision: number = 2, separator: string = &#39;,&#39;, decimal: string = &#39;.&#39;, prefix?: string, suffix?: string) =&gt; string</td></tr><tr><td style="${ssrRenderStyle({ "text-align": "left" })}">rafTimeout</td><td style="${ssrRenderStyle({ "text-align": "left" })}">使用 <code>requestAnimationFrame</code> 实现的延迟 <code>setTimeout</code> 或间隔 <code>setInterval</code> 调用函数</td><td style="${ssrRenderStyle({ "text-align": "left" })}">(fn: Function, delay: number = 0, interval: boolean = false) =&gt; object</td></tr><tr><td style="${ssrRenderStyle({ "text-align": "left" })}">cancelRaf</td><td style="${ssrRenderStyle({ "text-align": "left" })}">用于取消 <code>rafTimeout</code> 函数</td><td style="${ssrRenderStyle({ "text-align": "left" })}">(raf: { id: number }) =&gt; void</td></tr><tr><td style="${ssrRenderStyle({ "text-align": "left" })}">throttle</td><td style="${ssrRenderStyle({ "text-align": "left" })}">节流函数</td><td style="${ssrRenderStyle({ "text-align": "left" })}">(fn: Function, delay: number = 300) =&gt; any</td></tr><tr><td style="${ssrRenderStyle({ "text-align": "left" })}">debounce</td><td style="${ssrRenderStyle({ "text-align": "left" })}">防抖函数</td><td style="${ssrRenderStyle({ "text-align": "left" })}">(fn: Function, delay: number = 300) =&gt; any</td></tr><tr><td style="${ssrRenderStyle({ "text-align": "left" })}">add</td><td style="${ssrRenderStyle({ "text-align": "left" })}">消除 <code>js</code> 加减精度问题的加法函数</td><td style="${ssrRenderStyle({ "text-align": "left" })}">(num1: number, num2: number) =&gt; number</td></tr><tr><td style="${ssrRenderStyle({ "text-align": "left" })}">downloadFile</td><td style="${ssrRenderStyle({ "text-align": "left" })}">下载文件并自定义文件名，未传 <code>name</code> 时，从文件地址中自动提取文件名称</td><td style="${ssrRenderStyle({ "text-align": "left" })}">(url: string, fileName?: string) =&gt; void</td></tr><tr><td style="${ssrRenderStyle({ "text-align": "left" })}">toggleDark</td><td style="${ssrRenderStyle({ "text-align": "left" })}">一键切换暗黑模式函数</td><td style="${ssrRenderStyle({ "text-align": "left" })}">() =&gt; void</td></tr><tr><td style="${ssrRenderStyle({ "text-align": "left" })}">useEventListener</td><td style="${ssrRenderStyle({ "text-align": "left" })}">使用 <code>Vue</code> 的生命周期钩子添加和移除事件监听器</td><td style="${ssrRenderStyle({ "text-align": "left" })}">(target: HTMLElement | Window | Document, event: string, callback: Function) =&gt; void</td></tr><tr><td style="${ssrRenderStyle({ "text-align": "left" })}">useMutationObserver</td><td style="${ssrRenderStyle({ "text-align": "left" })}">使用 <code>MutationObserver</code> 观察 <code>DOM</code> 元素的变化</td><td style="${ssrRenderStyle({ "text-align": "left" })}">(target: Ref | Ref[] | HTMLElement | HTMLElement[], callback: MutationCallback, options = {}) =&gt; object</td></tr><tr><td style="${ssrRenderStyle({ "text-align": "left" })}">useScroll</td><td style="${ssrRenderStyle({ "text-align": "left" })}">实时监测目标元素滚动位置及状态</td><td style="${ssrRenderStyle({ "text-align": "left" })}">(target: Ref | HTMLElement | Window | Document = window, throttleDelay: number = 0, onScroll?: (e: Event) =&gt; void, onStop?: (e: Event) =&gt; void) =&gt; object</td></tr><tr><td style="${ssrRenderStyle({ "text-align": "left" })}">useFps</td><td style="${ssrRenderStyle({ "text-align": "left" })}">实时监测浏览器刷新率FPS</td><td style="${ssrRenderStyle({ "text-align": "left" })}">() =&gt; object</td></tr><tr><td style="${ssrRenderStyle({ "text-align": "left" })}">useMediaQuery</td><td style="${ssrRenderStyle({ "text-align": "left" })}">使用媒体查询来判断当前环境是否符合指定的媒体查询条件</td><td style="${ssrRenderStyle({ "text-align": "left" })}">(mediaQuery: string) =&gt; object</td></tr><tr><td style="${ssrRenderStyle({ "text-align": "left" })}">useResizeObserver</td><td style="${ssrRenderStyle({ "text-align": "left" })}">使用 <code>ResizeObserver</code> 观察 <code>DOM</code> 元素尺寸变化</td><td style="${ssrRenderStyle({ "text-align": "left" })}">(target: Ref | Ref[] | HTMLElement | HTMLElement[], callback: ResizeObserverCallback, options = {}) =&gt; object</td></tr><tr><td style="${ssrRenderStyle({ "text-align": "left" })}">useSlotsExist</td><td style="${ssrRenderStyle({ "text-align": "left" })}">监听给定名称或名称数组的插槽是否存在，支持监听单个插槽或一组插槽的存在</td><td style="${ssrRenderStyle({ "text-align": "left" })}">(slotsName: string | string[] = &#39;default&#39;) =&gt; Reactive | Ref&lt;boolean&gt;</td></tr></tbody></table></div>`);
}
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("utils/started.md");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
const started = /* @__PURE__ */ _export_sfc(_sfc_main, [["ssrRender", _sfc_ssrRender]]);
export {
  __pageData,
  started as default
};
